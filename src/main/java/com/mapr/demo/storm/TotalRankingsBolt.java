package com.mapr.demo.storm;

import backtype.storm.tuple.Tuple;

import com.google.common.collect.Lists;
import com.mapr.demo.storm.util.AbstractRankerBolt;
import com.mapr.demo.storm.util.Rankable;
import com.mapr.demo.storm.util.Rankings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * This bolt merges incoming {@link Rankings}.
 *
 * It can be used to merge intermediate rankings generated by {@link IntermediateRankingsBolt} into a final,
 * consolidated ranking. To do so, configure this bolt with a globalGrouping on {@link IntermediateRankingsBolt}.
 *
 */
public final class TotalRankingsBolt extends AbstractRankerBolt {

    private static final long serialVersionUID = -8447525895532302198L;
    private static final Logger LOG = LoggerFactory.getLogger(TotalRankingsBolt.class);

    public TotalRankingsBolt(int topN) {
        super(topN, true);
    }

    @Override
    public void updateRankingsWithTuple(Tuple tuple) {
        Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
        List<Rankable> z = Lists.newArrayList();
        for (Rankable r : rankingsToBeMerged) {
            z.add(r);
        }
        for (Rankable r : z) {
            getRankings().add(r);
        }
    }

    public Logger getLogger() {
        return LOG;
    }

}
